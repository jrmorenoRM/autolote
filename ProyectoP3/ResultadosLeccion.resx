<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPY6AQD2OgEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAADAAAAAgAAAAIAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAAAAAAACAAAAAgAAAAAAAAADAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAAEAAAAAAAAAMAAAAL0AAAC+AAAAMQAAAAAAAAABAAAAAwAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAIAAAAAAAAAIAAAAKMAAAD9AAAA/wAAAP8AAAD9AAAAowAA
        ACEAAAAAAAAAAgAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        APwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD8AAAA/QAAAP8AAAD6AAAA/wAAAKUAAAAAAAAAAAAAACEAAAC0AAAA/gAA
        AP8AAAD8AAAA/AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAAD8AAAA/wAAAP0AAAClAAAAHwAAAAAAAAAAAAAAAQAA
        AAAAAAAxAAAAuQAAAP8AAAD/AAAA/AAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAAD8AAAA/wAAAP8AAAC6AAAAMgAAAAAAAAABAAAAAAAA
        AAAAAAACAAAAAwAAAAAAAAAAAAAARQAAAM0AAAD/AAAA/gAAAPwAAAD9AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAAD8AAAA/gAAAP8AAADOAAAARgAAAAAAAAAAAAAAAwAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAAAAAAAAgAAAFsAAADeAAAA/wAAAP0AAAD7AAAA/gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAAD7AAAA/QAAAP8AAADeAAAAXAAAAAIAAAAAAAAAAwAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAACAAAAAAAAAAkAAABzAAAA7AAA
        AP8AAAD9AAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAA/QAAAP8AAADsAAAAdAAAAAkAAAAAAAAAAgAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAgAA
        AAAAAAATAAAAiwAAAPYAAAD/AAAA/QAAAPwAAAD8AAAA/QAAAP8AAAD2AAAAjAAAABMAAAAAAAAAAgAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABAAAAAIAAAAAAAAAIQAAAKMAAAD9AAAA/wAAAP8AAAD9AAAApAAAACEAAAAAAAAAAgAA
        AAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAMAAAABAAAAAAAAADAAAAC9AAAAvgAAADEAAAAAAAAAAQAA
        AAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAAAAAAIAAAACAAAAAAAA
        AAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAgAA
        AAIAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////6X///5Cf//5JJ//9EIv/9EAi/9EACIf0AAKH0AAAv9AAAIfQB
        gCH0BmAh9AQgIfQwDCH0wAMh0QAAoSQAACGIAAABIAAAAYAAAAGAAAABIAAABIgAABEkAAAk0QAAi/RA
        Ai/9EAi//0Qi//+SSf//5Cf///pf//////8=
</value>
  </data>
</root>